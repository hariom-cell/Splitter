class Communication
     {
      public static void main(String args[]) throws Exception
          {
               Producer obj1=new Producer();
               Consumer   obj2=new Consumer(obj1);
                Thread t1=new Thread(obj1);
                Thread t2=new Thread(obj2);
              t1.start();  t2.start();
          }
    }
class Producer extends Thread
        {
            StringBuffer sb;
            boolean dataprodover=false;
            Producer()
             {
               sb=new StringBuffer();
             }
           public void run()
              {
                  for(int i=1;i<=10;i++)
                   {
                      try
                           {
                             sb.append(i+":");
                            System.out.println("appending");
                          Thread.sleep(1000);
                  }catch(Exception e){}
                  }
                   dataprodover=true;
              }
        }
      class Consumer extends Thread
                 {
                     Producer prod;
                     Consumer(Producer prod)
                        {
                           this.prod=prod;
                        }
                    public void run()
                        {
                           try
                               {
                                //  while( prod.dataprodover==false )
                                 //       {  System.out.println("checking....checking checking cheking");
                                 //          Thread.sleep(100);
                                  //      }
                               }catch(Exception e){}
                               System.out.println(prod.sb);
                          }
                       }





 /*
   shutdown hook is a thread 
   we can  registere this  thread with  java runtime environment 
    a java application can register a thread with jre using following method of  java.lang.Runtime  class

         public void addShutdownHook(Thread t); 

         same thread get executed when java application terminates
         To define working of shutdownhook define a class that implements runnable interface directly
         or indirectly.

         A shutdown hook is simply an initialized but unstarted thread. 
         When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some                   unspecified order and let them run concurrently.
   */
  class Shutdown1 implements Runnable
      {
           public void run()
              {
                  int ctr=1;
                       while(ctr<=10)
                             {
                                System.out.println(" performing cleanup  upon application termination  ....  " + ctr);
                                ctr++;
                                try { Thread.sleep(200); } catch(Exception e){}
                             }
              }
      }
   class DemoShut 
        {
             public static void main(String args[])
                   {
                          Thread t=new Thread(new Shutdown1() );
                          Thread tttt=new Thread(new Shutdown1() );

                           Runtime r  = Runtime.getRuntime( );

                           r.addShutdownHook( t );
                           r.addShutdownHook( tttt );

                          Thread clerk1=new Thread(new Dispatch() );   clerk1.setName("varun");  clerk1.start();
                          Thread clerk2=new Thread(new Dispatch() );   clerk2.setName("Mohan");  clerk2.start();


                          int ctr  =1;
                  
                          while(ctr<15)
                                {
                                       System.out.println(" Hey guys keeps on working main working...."  + ctr );
                                       ctr++;
                                       try { Thread.sleep(200); } catch(Exception e){}
                                }
                                           System.exit(1);
                              System.out.println(" exiting main ....");
 
                try { Thread.sleep(4000); } catch(Exception e){}
                  
                   }
        }
      class Dispatch  implements Runnable
           {  
                public void run()  
                 {
                   String name = Thread.currentThread().getName();
                    for(int i=1;i<15;i++)
                       {
                            System.out.println(  name +  "  m  performing Dispatch  " + i );
                            try {  Thread.sleep(200); } catch(Exception e) {}
                       }
                 }

           }     

 
  

  class  LazyThread  implements Runnable
       {
            public void run()
                 {
                   System.out.println("m sleeping..." + Thread.currentThread().getName() );
                     try{ 
                              Thread.sleep(5000);
                                System.out.println(" Feeling fresh    :  " + Thread.currentThread().getName() );
                          }  catch(InterruptedException e)
                                   {
                                        System.out.println(" Some body has disturbed me ...ab nahi jayenge " +  Thread.currentThread().getName( ) );
                                        return;                
                                    }
                 System.out.println(" ok chalo ab college chalte hai......");
              }
       }
class DemoThGp
      {
        public static void main(String args[])
           {
              ThreadGroup tg=new ThreadGroup("My Group...");
              LazyThread ob=new LazyThread();

              Thread t1=new Thread(tg,ob,"rohan");
              Thread t2=new Thread(tg,ob,"milind");
              Thread t3=new Thread(tg, ob,"golu");
               t1.start(); t2.start(); t3.start();
               System.out.println(" no of  currently active threads are  "    + tg.activeCount() );
                tg.list();
               try {   Thread.sleep(3000); }catch(Exception e) {}
             if ( tg.activeCount() > 0)
             {
               System.out.println("Threads are taking too much time");
                tg.interrupt(); // interrupting whole group...
                  }                              
           }
      }

  Interrupting Thread..... using    interrupt()   method...
           1     interrupt()   and  checking wheater a thread is interrupted or not using 
           2     interrrupted();
           3     isInterrupted();   methods.....
Interrupting Thread   ..   means  requesting a thread to terminate it's working ... 
    1. in  default manner a thread terminated when its run method returns or  finish his work
    2. in jdk1.0 there was a stop() method that another thread can call to terminate 
        how ever this method is now depricated means there is no longer a way to force an 
        thread to  terminate.
   However to terminate a thread  interrupt() method can be used to request termination of  thread.
   Note : every thread object implicitly consist of interrupted status value same value is of boolean type   
             ( by default it consist of  false value )
     public void interrupt()
     when we call interrupt() method then interrupted status  of thread object is set to true
    To check current interrupted status of a thread object  Thread class provides two methods
              1.   interrupted()
                      public static boolean interrupted();
                     Test wheather the current thread  has been interrupted. call of interrupted() has                                       side effect i.e. it  reset the   interrupted   status of the current thread to false.
       Note :so it means that second subsequent call of interrupted always return a  false value.
              2.  isInterrupted()
                      public boolean isInterrupted()
                   test wheather the current thread  has been interrupted. 
   unlike  interrupted() method this method does not change the interrupted  status of   the thread.

if we call interrupted() or isInterrupted() method on a thread which is blocked by sleep or  wait  then InterruptedException will occur   and  sleep() and wait() will over after the     same exception get fired.




     class LazyThread extends Thread
        {
          public void run()
             {
               System.out.println(" Some has started me !! ");
              System.out.println(" Don't disturb m , sleeping... ");
              try
                  {
                    Thread.sleep(8000);
                    System.out.println("  Feeling Fresh ...");
                  }catch(InterruptedException e)
                      {
                             System.out.println(" Some body  disturbed  me.");
                      }
                int   number=0;
                        int ctr=1;
                   while(  true )
                     {
                       System.out.println("  \n  some working....   " + number++   +    "         "   +  isInterrupted() );
                           if (  interrupted() )
                                 { 
                                  for( int i=0; i<1500;i++)
                                       {
                                       System.out.println(" ok w r gng to stop.   some body ask us to stop .." + ctr );
                                      }
                                       ctr++;  
                                          if ( ctr == 5 )
                                             { break ; } 
                                 }
                     }
                 System.out.println(" after    ..exiting from run...");
               }
         }
    class Interruptor
        {
            public static void main(String args[])
               {
                  System.out.println(" Starting a Lazy Thread");
                  LazyThread th=new LazyThread();
                  System.out.println(" giving lazy 5 second to complete ");
                  th.start();
                  try
                     {  
                        th.join(5000);   
                    }catch(Exception e) {}
                      th.interrupt();
                  while( th.isAlive())
                     {
                       System.out.println(" Lazy is taking too much time to complete...interrupting it");
                       try {   Thread.sleep(3000);  } catch(InterruptedException e )  {}
                       th.interrupt();
                     }
                  System.out.println("  Exiting from  main...");
               }
        }









      class Clerk extends Thread
           {  String name; int cycle;
               public Clerk(String nm,int cycle )
                   {  name=nm;  this.cycle=cycle; }
                public void run()  
                 {
                    for(int i=1;i<cycle;i++)
                       {
                    System.out.println(  "m working " +  name + "   " + i);
                  try {  Thread.sleep(1000); } catch(Exception e) {}
                       }
                 }
           }     
      class Manager
          {
                public static void main(String args[]) throws Exception
                  {
                    Clerk c1=new Clerk("Mohan",5); c1.start();
                    Clerk c2=new Clerk("Rohan",10);  c2.start();
                    Clerk c3=new Clerk("Sohan",5);   c3.start();
                    for(int i=1;i<10;i++)
                       {
                           System.out.println(  "m working manager " + i);
                           Thread.sleep(100);
                       }
               c1.join();  c3.join(); 
                  System.out.println( " M going : manager");                    
                  }
         }

class ncomm
     {
      public static void main(String args[]) throws Exception
          {
               Producer obj1=new Producer();
               Consumer   obj2=new Consumer(obj1);
               Consumer   obj3=new Consumer(obj1);

                Thread t1=new Thread(obj1);
                Thread t2=new Thread(obj2);
                Thread t3=new Thread(obj3);

             t3.start();  t2.start();  t1.start(); 
          }
     }
class Producer extends Thread
        {
            StringBuffer sb;     boolean   status=false;
            Producer()
             {
               sb=new StringBuffer();
             }
           public void run()
              {
                synchronized(sb)
                 {
                    for(int i=1;i<=10;i++)
                       {
                         try
                             {
                               sb.append(i+":");
                               System.out.println("appending");
                              Thread.sleep(1000);
                            }catch(Exception e){}
                       }
                  status=true;
                  sb.notifyAll();
              }
        }
   }
  class Consumer extends Thread
                 {
                     Producer prod;
                     Consumer(Producer prod)
                        {
                           this.prod=prod;
                        }
                    public void run()
                        {
              synchronized(prod.sb)
                 {     
                              try
                               {
                               System.out.println("checkig...");
                                if ( prod.status==false )
                                 {
                              try{ prod.sb.wait(); } catch(Exception e){}
                                  }
                               }catch(Exception e){}
                               System.out.println(" contents of sb = " + prod.sb);
                  }
                      }
          }
/*
  wait()
   causes a thread to wait until it is notified. 
   This mehtod can only be called from synchronized method
   when  wait () method executes it break the synchronized block so that object lock is removed
     
   Note  : when sleep() is called from the synchronized block at that time object is still under lock

   Generally sleep is used for making a thread to wait for some time
   where as wait() is used in connection to notify and notifyAll

   notifyAll()
          ... unblock the threads that called wait() on this object
          .. can only be called from synchronized block

   notify()
          .. unblocks one randomly selected thread among the threads that called wait on this object
        
*/






  class Share
     {
        int x;
        synchronized void show(String s,int a)
              {
                x=a;
               System.out.print(" Starting(show) " + s + "   " + x);
               try
                   {
                     Thread.sleep(2000);
                   }catch(Exception e){}
             System.out.println(" Ending(show) " + s + "   " + x);
            }
       void show1(String s,int a)
              {
                x=a;
               System.out.print(" Starting(show1) " + s + "   " + x);
               try
                   {
                     Thread.sleep(2000);
                   }catch(Exception e){}
             System.out.println(" Ending(show1) " + s + "   " + x);
            }
      }
   class CustomThread1 extends Thread
        {
              Share s;
              public CustomThread1(Share s,String str)
                  {
                       super(str); this.s=s;
                       start();
                  }
              public void run()
                 {
                   s.show(Thread.currentThread().getName(),10);
                   s.show1(Thread.currentThread().getName(),10);
                    
                
         }
        }
   class CustomThread2 extends Thread
        {
              Share s;
              public CustomThread2(Share s,String str)
                  {
                       super(str); this.s=s;
                       start();
                  }
              public void run()
                 {
                   s.show(Thread.currentThread().getName(),20);
                   s.show1(Thread.currentThread().getName(),20);
                 }
        }
   class CustomThread3 extends Thread
        {
              Share s;
              public CustomThread3(Share s,String str)
                  {
                       super(str); this.s=s;
                       start();
                  }
              public void run()
                 {
                      s.show(Thread.currentThread().getName(),30);
                      s.show1(Thread.currentThread().getName(),30);

                 }
        }


   class RunSyn
         {
             public static void main(String args[])
                {
                   Share st=new Share();
        CustomThread1 t1=new CustomThread1(st,"one");
        CustomThread2 t2=new CustomThread2(st,"two");
        CustomThread3 t3=new CustomThread3(st,"three");
               }
         }
  class Share1
     {
       static int x;
       static synchronized void show(String s,int a)
              {
                x=a;
               System.out.print(" Starting(show) " + s + "   " + x);
               try
                   {
                     Thread.sleep(2000);
                   }catch(Exception e){}
             System.out.println(" Ending(show) " + s + "   " + x);
            }
      static  synchronized void show1(String s,int a)
              {
                x=a;
               System.out.print(" Starting(show1) " + s + "   " + x);
               try
                   {
                     Thread.sleep(2000);
                   }catch(Exception e){}
             System.out.println(" Ending(show1) " + s + "   " + x);
            }
      }
   class CustomThread1 extends Thread
        {
              Share1 s;
              public CustomThread1(Share1 s,String str)
                  {
                       super(str); this.s=s;
                       start();
                  }
              public void run()
                 {
                   s.show(Thread.currentThread().getName(),10);
                   Share1.show(Thread.currentThread().getName(),10);
                }
        }
   class CustomThread2 extends Thread
        {
              Share1 s;
              public CustomThread2(Share1 s,String str)
                  {
                       super(str); this.s=s;
                       start();
                  }
              public void run()
                 {
                   s.show(Thread.currentThread().getName(),20);
                   Share1.show(Thread.currentThread().getName(),20);
                 }
        }
   class CustomThread3 extends Thread
        {
              Share1 s;
              public CustomThread3(Share1 s,String str)
                  {
                       super(str); this.s=s;
                       start();
                  }
              public void run()
                 {
                      s.show(Thread.currentThread().getName(),30);
                      Share1.show(Thread.currentThread().getName(),30);

                 }
        }


   class RunSyn1
         {
             public static void main(String args[])
                {
                   Share1 st=new Share1();
        CustomThread1 t1=new CustomThread1(st,"one");
        CustomThread2 t2=new CustomThread2(st,"two");
        CustomThread3 t3=new CustomThread3(st,"three");
               }
         }
   class Share3
      {
           int flag =0; int data=0;
         synchronized  public void submit()
              {
                flag=1; 
               try
                  {
                     Thread.sleep(1000);
                  }catch(Exception e){}
              data=1;
             System.out.println("Value submitted ");
            notify();
           }
      synchronized int withDraw()
             {
                  if ( flag ==0)
                     {
                         try
                             {
                                System.out.println(" Wait block");
                                wait();
                               }catch(Exception e){}
                      }
                   return(data);
             }
     }
       class Thread1 extends Thread
          {
                Share3 s;
                public Thread1(Share3 s, String str)
                  {
                     super(str); this.s=s;
                    start();
                  }
             public void run()
               {
                  System.out.println(s.withDraw() );
               }
         }

       class Thread2 extends Thread
          {
                Share3 s;
                public Thread2(Share3 s, String str)
                  {
                     super(str); this.s=s;
                    start();
                  }
             public void run()
               {
                  s.withDraw() ;
               }
         }
      class RunSyn2
           {
               public static void main(String args[])
                  {
                     Share3 st=new Share3();
                   Thread t2=new Thread2(st,"two");
                     Thread t1=new Thread1(st,"one");
                
                 }
         }
 

 class  BackgroundMusic  implements  Runnable
        {
            public void run()
               {
                   while ( true )
                     {
                          System.out.println(" playing background music...."); 
                     }
               }
        }

       class   Reading  implements  Runnable
             {
            public void run()
               {
               int ctr=1;
                   while ( ctr<=rotation )
                     {
                          System.out.println("  m reading some  text......."  + ctr  +  "   "   +  Thread.currentThread().getName() ); 
                          System.out.println("  m reading some  text......."  + ctr  +  "   "   +  Thread.currentThread().getName() ); 
                          System.out.println("  m reading some  text......."  + ctr  +  "   "   +  Thread.currentThread().getName() ); 
                          System.out.println("  m reading some  text......."  + ctr  +  "   "   +  Thread.currentThread().getName() ); 
                          System.out.println("  m reading some  text......."  + ctr  +  "   "   +  Thread.currentThread().getName() ); 
                          System.out.println("  m reading some  text......."  + ctr  +  "   "   +  Thread.currentThread().getName() ); 
                          System.out.println("  m reading some  text......."  + ctr  +  "   "   +  Thread.currentThread().getName() ); 

                      try {  Thread.sleep(100);  }  catch ( InterruptedException e )  {}
                          ctr++;
                     }
               }
                   Reading( int  rotation )
                       {
                          this.rotation  =  rotation;
                       }
                   private  int   rotation;
            }

            class  TestDaemon
                {
                        public static void main( String args[] )
                            {      Thread    helper   = new Thread( new  BackgroundMusic() );    helper.start();
                                    Thread  t1   = new Thread ( new  Reading(50)  ,   "Rohit");  t1.start();
                                    Thread  t2   = new Thread ( new  Reading(20)  ,   "Vipin");  t2.start();
                                System.out.println(" End of  Application...");
                           }
                   }


   class Tester
      {
        public static void main(String args[])
           {
         try
             {
                System.out.println("Registering shutdown hook...");
                Runtime r= Runtime.getRuntime();
                r.addShutdownHook(new Terminator());
                int a=Integer.parseInt( arr[0]);
                System.out.println(" Invoking call me ... ");
                Thread.sleep(5000);

             }
           }
      }

    class AWork extends Thread
     {        public void run() 
                            {
                                 for(int i=0;i<5000;i++)
                                  {    System.out.println(" form aAWorkd    i =" + i  );  }
                            }
     }

     class  User
                 {  
                public static void main(String args[])
                  {
                      AWork   t1=new AWork(); 
                      t1.setDaemon( true );
                       t1.start(); 

                                 for(int i=0;i<50;i++)
                                  {    System.out.println(" in main  =" + i  );  }

                  }

             }






      class Shared
          {
                int x;
              Integer y;
                public int square(int a)
                  {
                     x=a;
                         this.y=a;
                synchronized(this.y)
                    {
                     try {  Thread.sleep(1000); } catch(Exception e) {}
                  System.out.println(" value of x = " + x);
                  System.out.println(" value of y= " + y);
                  }
                        return( y*y );
                    
                  }
         }
      class MyThread extends Thread
           {
               Shared s; int value;
               public MyThread( Shared s,int value)
                   { this.s=s;  this.value=value;}
                public void run() 
                 {
                    System.out.println(   s.square(value)  );
                 }
           }     
      class User1
          {
                public static void main(String args[])
                  {
                       Shared s=new Shared();
                         MyThread t1=new MyThread(s,10);  t1.start();
                         MyThread t2=new MyThread(s,20);  t2.start();
                         MyThread t3=new MyThread(s,15);  t3.start();
                  }
         }